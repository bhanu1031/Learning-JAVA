Time & Space Complexity-

// Time complexity of an algorithm quantifies the amount of time taken by an algorithm to run 
as a function of the length of the input. 

Types of notations 

1. O-notation: It is used to denote asymptotic upper bound. For a given function g(n), 
   we denote it by O(g(n)). Pronounced as ‚Äúbig-oh of g of n‚Äù. It is also known as worst case 
   time complexity as it denotes the upper bound in which the algorithm terminates.

2. ‚Ñ¶-notation: It is used to denote asymptotic lower bound. For a given function g(n),
   we denote it by ‚Ñ¶(g(n)). Pronounced as ‚Äúbig-omega of g of n‚Äù. It is also known as best case
   time complexity as it denotes the lower bound in which the algorithm terminates. 

3. ùöØ-notation: It is used to denote the average time of a program. 

//Space Complexity//

Space complexity of an algorithm quantifies the amount of time taken by a program to run 
as a function of length of the input. It is directly proportional to the largest memory your 
program acquires at any instance during run time. 

For example: int consumes 4 bytes of memory.
